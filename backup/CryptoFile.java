/*
 * Maybe you can use this, maybe you cant. The question is would you want to?
 */
package cryptofile;

import java.io.*;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.Scanner;

/**
 *
 * @author Dan Harris (harr0710)
 * 
 */
public class CryptoFile {

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws java.security.NoSuchAlgorithmException
     * @throws java.security.InvalidKeyException
     */
    public static void main(String[] args) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {        
        String arg = args[0];
        String algorithm = args[1]; // ie. AES SHA-256
        String filename = args[2];
        String key = "HD for EIS plz";
        
        File inputFile = new File(filename);
        File encryptedFile = new File(filename + ".encrypted");
        File encryptedRSAFile = new File(filename + ".rsa.encrypted");
        File decryptedFile = new File(filename + ".decrypted");
        File decryptedRSAFile = new File(filename + ".rsa.decrypted");
        File hashFile = new File(filename + ".hash");
        File keyFile = new File(filename + ".key");
        
        long startTime = System.nanoTime(); // record time for function to complete
        
        try {
            switch(arg){
                case "e": CryptoUtils.encrypt(key, inputFile, encryptedFile, algorithm); break; // symmetric encryption
                case "d": CryptoUtils.decrypt(key, encryptedFile, decryptedFile, algorithm); break; // symmetric decryption
                case "h": CryptoUtils.hash(inputFile, hashFile, algorithm); break; // create a hash
                case "k": CryptoUtils.generateKey(); break; // create a key pair for asymmetric encryption/decryption
                case "es": CryptoUtils.doCryptoRSA('e', inputFile, encryptedRSAFile); break; // asymmetric encryption using RSA
                case "ds": CryptoUtils.doCryptoRSA('d', encryptedRSAFile, decryptedRSAFile); break;// asymmetric decryption using RSA
                default: System.out.println("CryptoFile Usage:");
                    System.out.println("CryptoFile.jar [arg] [algorithm] filename"); 
                    System.out.println("\n\rArgs:");
                    System.out.println("e - encrypt a file using [algorithm]");
                    System.out.println("d - decrypt a file using [algorithm]");
                    System.out.println("h - create a hash of file using [algorithm]");
                    System.out.println("k - create a public/private key file for A-symmetric RSA crypto");
                    System.out.println("es - encrypt a file using RSA and public key generated by 'k' arg");
                    System.out.println("ds - decrypt a file using RSA and private key generated by 'k' arg");
                    System.out.println("\n\rAlgorithms:");
                    System.out.println("AES \n\rRSA \n\rSHA-1 \n\rSHA-256 \r\nDES \r\nMD5 ");
                    break;
            }
        } catch (CryptoException ex) {
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        }
        
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1000000; // convert to milliseconds

        String logOutput = "filesize " + (inputFile.length() / 1000 ) + " kB | duration: " + duration + " milliseconds | encryption: " + algorithm + "\r\n";
        String logName = inputFile + "_" + arg + "_log.txt";
        FileWriter fw = new FileWriter(logName,true);
        fw.write(logOutput);// append string to file
        fw.close();
    }

}
